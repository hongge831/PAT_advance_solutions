#include <stdio.h>
#include <iostream>
#include <queue>
#include <vector>
using namespace std;
struct info{
	int id;
	int needtime;
};
int main(){
	int n, m, k, q;
	cin >> n >> m >> k >> q;//m is the queue's largest size
	vector<queue<info>> vq(n);//number of bank windows
	vector<int> v(k + 1, 0);//every customer's depart time
	int cnt = 1;
	info temp;
	/*make every queue full*/
	while (vq[0].size() < m){
		for (int i = 0; i < n; i++)
		{
			if (cnt < k){
				//cin >> temp.needtime;
				scanf_s("%d", &temp.needtime);
				temp.id = cnt++;
				vq[i].push(temp);
			}
		}
	}
	/*simulate the procedure of forming line*/
	int min = 99999, minlast = 0;
	int leave = 0,lasttime=540;
	bool endflag = false;
	while (leave < k){
		/*find the smallest time of front of queue*/
		for (int i = 0; i < n; i++)
		{
			if (vq[i].size()!=0 && vq[i].front().needtime <= min){
				min = vq[i].front().needtime;
			}
		}
		minlast += min;
		for (int i = 0; i < n; i++)
		{
			if (vq[i].size() != 0){
				vq[i].front().needtime -= min;
				if (vq[i].front().needtime == 0)
				{
					v[vq[i].front().id] = minlast;
					if (minlast > 540){
						lasttime = minlast;
					}
					leave++;
					vq[i].pop();
				}
				if (vq[i].size() < m && cnt <= k){
					scanf_s("%d", &temp.needtime);
					temp.id = cnt++;
					vq[i].push(temp);
				}
			}
		}
		min = 99999;
	}
	/*query*/
	int query,hour,mini;
	for (int i = 0; i < q; i++)
	{
		scanf_s("%d", &query);
		if (v[query] >= lasttime){
			printf("Sorry\n");
		}
		else{
			hour = v[query] / 60;
			mini = v[query] % 60;
			printf("%02d:%02d\n",hour+8,mini);
		}
	}
	return 0;
}
